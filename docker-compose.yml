services:
  # PostgreSQL Database
  postgres_db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongo_db:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: ${ALLOW_ANONYMOUS_LOGIN}
      ZOO_SERVER_ID: ${ZOO_SERVER_ID}
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - zookeeperdata:/bitnami/zookeeper

  # Kafka Broker
  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: ${ALLOW_PLAINTEXT_LISTENER}
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    ports:
      - "9000:9000"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-network

  # Service for PostgreSQL
  service-postgres:
    build:
      context: ./services/user
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres_db:5432/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_GROUP_USER: ${KAFKA_GROUP_USER}
      PORT_USER: ${PORT_USER}
      JSONSECRET: ${JSONSECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_LOGIN: ${SMTP_LOGIN}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    depends_on:
      postgres_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks:
      - app-network
    restart: on-failure

  # Service for MongoDB
  service-mongodb:
    build:
      context: ./services/parking
    environment:
      MONGODB_URI: ${MONGODB_URI}
      KAFKA_BROKER: ${KAFKA_BROKER}
      KAFKA_GROUP_PARKING: ${KAFKA_GROUP_PARKING}
      PORT_PARKING: ${PORT_PARKING}
      JSONSECRET: ${JSONSECRET}
    depends_on:
      mongo_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3002:3002"
    networks:
      - app-network
    restart: on-failure

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  mongodata:
  zookeeperdata: